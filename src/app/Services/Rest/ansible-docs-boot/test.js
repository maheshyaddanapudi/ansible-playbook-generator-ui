import { Inject, Injectable, InjectionToken, NgModule, Optional, SkipSelf } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpUrlEncodingCodec } from '@angular/common/http';

/**
 * CustomHttpUrlEncodingCodec
 * Fix plus sign (+) not encoding, so sent as blank space
 * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318
 */
class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {
    /**
     * @param {?} k
     * @return {?}
     */
    encodeKey(k) {
        k = super.encodeKey(k);
        return k.replace(/\+/gi, '%2B');
    }
    /**
     * @param {?} v
     * @return {?}
     */
    encodeValue(v) {
        v = super.encodeValue(v);
        return v.replace(/\+/gi, '%2B');
    }
}

const BASE_PATH = new InjectionToken('basePath');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class Configuration {
    /**
     * @param {?=} configurationParameters
     */
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
    }
    /**
     * Select the correct content-type to use for a request.
     * Uses {\@link Configuration#isJsonMime} to determine the correct content-type.
     * If no content type is found return the first found type if the contentTypes is not empty
     * @param {?} contentTypes - the array of content types that are available for selection
     * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
     */
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length == 0) {
            return undefined;
        }
        let /** @type {?} */ type = contentTypes.find(x => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    /**
     * Select the correct accept content-type to use for a request.
     * Uses {\@link Configuration#isJsonMime} to determine the correct accept content-type.
     * If no content type is found return the first found type if the contentTypes is not empty
     * @param {?} accepts - the array of content types that are available for selection.
     * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
     */
    selectHeaderAccept(accepts) {
        if (accepts.length == 0) {
            return undefined;
        }
        let /** @type {?} */ type = accepts.find(x => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)
     * @return {?} True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const /** @type {?} */ jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}

/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */
class AnsibleCommandDetailerControllerService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://localhost:8080';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const /** @type {?} */ form = 'multipart/form-data';
        for (const /** @type {?} */ consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getAllModules(observe = 'body', reportProgress = false) {
        let /** @type {?} */ headers = this.defaultHeaders;
        // to determine the Accept header
        let /** @type {?} */ httpHeaderAccepts = [
            'application/json'
        ];
        const /** @type {?} */ httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        return this.httpClient.request('get', `${this.basePath}/api/modules`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} moduleName
     * @param {?} command
     * @param {?=} subModuleName
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCommandDetailsByModuleNameAndSubModuleNameAndCommand(moduleName, command, subModuleName, observe = 'body', reportProgress = false) {
        if (moduleName === null || moduleName === undefined) {
            throw new Error('Required parameter moduleName was null or undefined when calling getCommandDetailsByModuleNameAndSubModuleNameAndCommand.');
        }
        if (command === null || command === undefined) {
            throw new Error('Required parameter command was null or undefined when calling getCommandDetailsByModuleNameAndSubModuleNameAndCommand.');
        }
        let /** @type {?} */ queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (moduleName !== undefined && moduleName !== null) {
            queryParameters = queryParameters.set('module_name', /** @type {?} */ (moduleName));
        }
        if (subModuleName !== undefined && subModuleName !== null) {
            queryParameters = queryParameters.set('sub_module_name', /** @type {?} */ (subModuleName));
        }
        if (command !== undefined && command !== null) {
            queryParameters = queryParameters.set('command', /** @type {?} */ (command));
        }
        let /** @type {?} */ headers = this.defaultHeaders;
        // to determine the Accept header
        let /** @type {?} */ httpHeaderAccepts = [
            'application/json'
        ];
        const /** @type {?} */ httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        return this.httpClient.request('get', `${this.basePath}/api/command-details`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} moduleName
     * @param {?=} subModuleName
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCommandsByModuleNameAndSubModuleName(moduleName, subModuleName, observe = 'body', reportProgress = false) {
        let /** @type {?} */ queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (moduleName !== undefined && moduleName !== null) {
            queryParameters = queryParameters.set('module_name', /** @type {?} */ (moduleName));
        }
        if (subModuleName !== undefined && subModuleName !== null) {
            queryParameters = queryParameters.set('sub_module_name', /** @type {?} */ (subModuleName));
        }
        let /** @type {?} */ headers = this.defaultHeaders;
        // to determine the Accept header
        let /** @type {?} */ httpHeaderAccepts = [
            'application/json'
        ];
        const /** @type {?} */ httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        return this.httpClient.request('get', `${this.basePath}/api/command`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} moduleName
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getSubModulesByModuleName(moduleName, observe = 'body', reportProgress = false) {
        let /** @type {?} */ queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (moduleName !== undefined && moduleName !== null) {
            queryParameters = queryParameters.set('module_name', /** @type {?} */ (moduleName));
        }
        let /** @type {?} */ headers = this.defaultHeaders;
        // to determine the Accept header
        let /** @type {?} */ httpHeaderAccepts = [
            'application/json'
        ];
        const /** @type {?} */ httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        return this.httpClient.request('get', `${this.basePath}/api/sub-modules`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
AnsibleCommandDetailerControllerService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AnsibleCommandDetailerControllerService.ctorParameters = () => [
    { type: HttpClient, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
    { type: Configuration, decorators: [{ type: Optional },] },
];

const APIS = [AnsibleCommandDetailerControllerService];

class ApiModule {
    /**
     * @param {?} parentModule
     * @param {?} http
     */
    constructor(parentModule, http$$1) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http$$1) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    static forRoot(configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: Configuration, useFactory: configurationFactory }]
        };
    }
}
ApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: [],
                providers: [
                    AnsibleCommandDetailerControllerService
                ]
            },] },
];
/**
 * @nocollapse
 */
ApiModule.ctorParameters = () => [
    { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
    { type: HttpClient, decorators: [{ type: Optional },] },
];

/**
 * Generated bundle index. Do not edit.
 */

export { APIS, AnsibleCommandDetailerControllerService, BASE_PATH, COLLECTION_FORMATS, Configuration, ApiModule };
//# sourceMappingURL=test.js.map
