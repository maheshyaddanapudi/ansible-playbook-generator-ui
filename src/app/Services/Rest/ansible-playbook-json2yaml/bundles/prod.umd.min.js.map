{"version":3,"file":"prod.umd.min.js","sources":["~/prod/variables.ts","~/prod/configuration.ts","~/prod/api/playbookRequest.service.ts","~/prod/api/api.ts","~/prod/api.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Ansible Playbook JSON to YAML\n * Ansible Playbook JSON to YAML\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { GeneratePlaybookRequestInner } from '../model/generatePlaybookRequestInner';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PlaybookRequestService {\n\n    protected basePath = 'http://localhost:2020/';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create a new playbook response\n     * \n     * @param body Playbook Request Post Object\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling generateYamlPost.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/generate-yaml`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './playbookRequest.service';\nimport { PlaybookRequestService } from './playbookRequest.service';\nexport const APIS = [PlaybookRequestService];\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { PlaybookRequestService } from './api/playbookRequest.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    PlaybookRequestService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"],"names":["BASE_PATH","InjectionToken","Configuration","prototype","selectHeaderContentType","contentTypes","_this","this","length","undefined","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","PlaybookRequestService","canConsumeForm","consumes","_i","consumes_1","generateYamlPost","body","observe","reportProgress","Error","headers","defaultHeaders","httpHeaderAcceptSelected","configuration","set","httpContentTypeSelected","httpClient","request","HttpHeaders","decorators","Injectable","ctorParameters","HttpClient","Optional","Inject","args","APIS","ApiModule","forRoot","configurationFactory","ngModule","providers","provide","useFactory","parentModule","http","NgModule","imports","declarations","exports","SkipSelf","csv","tsv","ssv","pipes"],"mappings":"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"}
