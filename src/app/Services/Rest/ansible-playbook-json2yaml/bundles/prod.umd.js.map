{"version":3,"file":"prod.umd.js","sources":["~/prod/api.module.ts","~/prod/api/api.ts","~/prod/api/playbookRequest.service.ts","~/prod/configuration.ts","~/prod/variables.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { PlaybookRequestService } from './api/playbookRequest.service';\nexport class ApiModule {\n/**\n * @param {?} configurationFactory\n * @return {?}\n */\npublic static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n/**\n * @param {?} parentModule\n * @param {?} http\n */\nconstructor(   parentModule: ApiModule,\n                  http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    PlaybookRequestService ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n{type: HttpClient, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ApiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nApiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export {PlaybookRequestService} from './playbookRequest.service';\nimport { PlaybookRequestService } from './playbookRequest.service';\nexport const /** @type {?} */ APIS = [PlaybookRequestService];\n","/**\n * Ansible Playbook JSON to YAML\n * Ansible Playbook JSON to YAML\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent } from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { GeneratePlaybookRequestInner } from '../model/generatePlaybookRequestInner';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nexport class PlaybookRequestService {\n\n    protected basePath = 'http://localhost:2020/';\npublic defaultHeaders = new HttpHeaders();\npublic configuration = new Configuration();\n/**\n * @param {?} httpClient\n * @param {?} basePath\n * @param {?} configuration\n */\nconstructor(protected httpClient: HttpClient,  basePath: string,  configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n/**\n * @param {?} consumes string[] mime-types\n * @return {?} true: consumes contains 'multipart/form-data', false: otherwise\n */\nprivate canConsumeForm(consumes: string[]): boolean {\n        const /** @type {?} */ form = 'multipart/form-data';\n        for (const /** @type {?} */ consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\npublic generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe?: 'body', reportProgress?: boolean): Observable<any>;\npublic generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\npublic generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n/**\n * @param {?} body\n * @param {?=} observe\n * @param {?=} reportProgress\n * @return {?}\n */\npublic generateYamlPost(body: Array<GeneratePlaybookRequestInner>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling generateYamlPost.');\n        }\n\n        let /** @type {?} */ headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let /** @type {?} */ httpHeaderAccepts: string[] = [\n        ];\n        const /** @type {?} */ httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const /** @type {?} */ consumes: string[] = [\n            'application/json'\n        ];\n        const /** @type {?} */ httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/generate-yaml`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH, ] }, ]},\n{type: Configuration, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction PlaybookRequestService_tsickle_Closure_declarations() {\n/** @type {?} */\nPlaybookRequestService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlaybookRequestService.ctorParameters;\n/** @type {?} */\nPlaybookRequestService.prototype.basePath;\n/** @type {?} */\nPlaybookRequestService.prototype.defaultHeaders;\n/** @type {?} */\nPlaybookRequestService.prototype.configuration;\n/** @type {?} */\nPlaybookRequestService.prototype.httpClient;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n/**\n * @param {?=} configurationParameters\n */\nconstructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n/**\n * Select the correct content-type to use for a request.\n * Uses {\\@link Configuration#isJsonMime} to determine the correct content-type.\n * If no content type is found return the first found type if the contentTypes is not empty\n * @param {?} contentTypes - the array of content types that are available for selection\n * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.\n */\npublic selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let /** @type {?} */ type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n/**\n * Select the correct accept content-type to use for a request.\n * Uses {\\@link Configuration#isJsonMime} to determine the correct accept content-type.\n * If no content type is found return the first found type if the contentTypes is not empty\n * @param {?} accepts - the array of content types that are available for selection.\n * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.\n */\npublic selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let /** @type {?} */ type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n/**\n * Check if the given MIME is a JSON MIME.\n * JSON MIME examples:\n *   application/json\n *   application/json; charset=UTF8\n *   APPLICATION/JSON\n *   application/vnd.company+json\n * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)\n * @return {?} True if the given MIME is JSON, false otherwise.\n */\npublic isJsonMime(mime: string): boolean {\n        const /** @type {?} */ jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n\nfunction Configuration_tsickle_Closure_declarations() {\n/** @type {?} */\nConfiguration.prototype.apiKeys;\n/** @type {?} */\nConfiguration.prototype.username;\n/** @type {?} */\nConfiguration.prototype.password;\n/** @type {?} */\nConfiguration.prototype.accessToken;\n/** @type {?} */\nConfiguration.prototype.basePath;\n/** @type {?} */\nConfiguration.prototype.withCredentials;\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const /** @type {?} */ BASE_PATH = new InjectionToken<string>('basePath');\nexport const /** @type {?} */ COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n"],"names":["HttpClient","Optional","SkipSelf","NgModule","http","Inject","Injectable","HttpHeaders","InjectionToken"],"mappings":"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"}
